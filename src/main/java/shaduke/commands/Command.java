package shaduke.commands;

import shaduke.ShadukeException;
import shaduke.Storage;
import shaduke.tasks.TaskList;
import shaduke.ui.GuiUi;
import shaduke.ui.Ui;

/**
 * Represents an abstract user command that can be executed.
 * <p>
 * Subclasses of {@code Command} implement specific actions such as
 * adding tasks, marking tasks, deleting tasks, or exiting the program.
 * </p>
 */
public abstract class Command {

    /**
     * Executes the command logic.
     *
     * @param tasks   the current {@link TaskList} containing all tasks.
     * @param ui      the {@link Ui} object responsible for displaying output.
     * @param storage the {@link Storage} object responsible for saving task data.
     */
    public abstract void execute(TaskList tasks, Ui ui, Storage storage);

    /**
     * Indicates whether this command is an exit command.
     *
     * @return {@code true} if this command will cause the application to exit,
     *         {@code false} otherwise
     */
    public abstract boolean isExit();

    /**
     * Executes the command and returns the output as a {@link String}.
     * <p>
     * This method is mainly used by the GUI layer, which requires
     * commands to produce an output string instead of printing directly.
     * </p>
     *
     * @param tasks   the current {@link TaskList} containing all tasks.
     * @param storage the {@link Storage} object responsible for saving task data.
     * @return the output message(s) generated by executing the command.
     * @throws ShadukeException if execution fails due to invalid input or other errors.
     */
    public String executeAndReturn(TaskList tasks, Storage storage) throws ShadukeException {
        GuiUi tempUi = new GuiUi(); // temporary UI that buffers output instead of printing
        this.execute(tasks, tempUi, storage);
        return tempUi.getOutput();
    }
}
